/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PoliceDepartment;

/**
 *
 * @author sahilpadyal
 */

import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.PutObjectRequest;
import java.awt.Image;
import java.io.File;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import utilPackage.Helper;
import utilPackage.S3BucketOperations;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Evidence;
import utilPackage.ResultSetMapper;
public class EvidencePortal extends javax.swing.JFrame {

    /**
     * Creates new form mainPoliceDept
     */
    public EvidencePortal() {
        initComponents();
        
        try {
          
            List<Evidence> evidenceList = Helper.getResultSet(Evidence.class, "evidence");
            
            if(evidenceList != null) {
                for(Evidence i : evidenceList){
                    Integer evidenceId = i.getEvidenceId();
                    Integer caseId = i.getCaseId();
                    String description = i.getDescription();
                    DefaultTableModel tblModel = (DefaultTableModel)jEvidenceTable.getModel();
                    Object[] obj = {evidenceId, caseId, description};
                    tblModel.addRow(obj);                   
                }
            }
            
            
        } catch (InstantiationException ex) {
            Logger.getLogger(CasePortal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        uploadEvidence = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEvidenceTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCaseId = new javax.swing.JTextField();
        jDescription = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jDelete = new javax.swing.JButton();
        jUpdateButton = new javax.swing.JButton();
        createEvidence = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jImagePath = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Evidence Portal");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        uploadEvidence.setText("Add Evidence");
        uploadEvidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadEvidenceActionPerformed(evt);
            }
        });

        jEvidenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Evidence ID", "Case ID", "Description"
            }
        ));
        jEvidenceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jEvidenceTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jEvidenceTable);

        jLabel2.setText("Case ID");

        jLabel3.setText("Description");

        jCaseId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCaseIdActionPerformed(evt);
            }
        });

        jButton4.setText("Reset");

        jDelete.setText("Delete");
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });

        jUpdateButton.setText("Update");
        jUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateButtonActionPerformed(evt);
            }
        });

        createEvidence.setText("Create");
        createEvidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createEvidenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCaseId))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(176, 176, 176))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(uploadEvidence, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(createEvidence)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jUpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 872, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jLabel4)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jCaseId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(uploadEvidence)
                                .addComponent(createEvidence)
                                .addComponent(jUpdateButton)
                                .addComponent(jDelete)
                                .addComponent(jButton4))
                            .addGap(9, 9, 9)
                            .addComponent(jLabel4))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(231, 231, 231)
                            .addComponent(jImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(257, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadEvidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadEvidenceActionPerformed
        JFileChooser browseImageFile = new JFileChooser();
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("IMAGE", "png","jpg", "jpeg");
        browseImageFile.addChoosableFileFilter(fnef);
        int showOptionDialogue = browseImageFile.showOpenDialog(null);
        if(showOptionDialogue == JFileChooser.APPROVE_OPTION) {
            File selectedImageFile = browseImageFile.getSelectedFile();
            String selectedImagePath = selectedImageFile.getAbsolutePath();
            JOptionPane.showMessageDialog(null, selectedImagePath);
            ImageIcon imgIcon = new ImageIcon(selectedImagePath);
            Image img = imgIcon.getImage();
            Image scaledImage = img.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImgIcon = new ImageIcon(scaledImage);
            imageLabel.setIcon(scaledImgIcon);
            S3BucketOperations.uploadS3Object(selectedImagePath);
            jImagePath.setName(selectedImagePath);
        }
    }//GEN-LAST:event_uploadEvidenceActionPerformed

    private void jCaseIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCaseIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCaseIdActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed

//        DefaultTableModel tblModel = (DefaultTableModel)jCaseMasterTable.getModel();
//        if(jCaseMasterTable.getSelectedRowCount() == 1){
//
//            Integer caseId = Integer.valueOf(tblModel.getValueAt(jCaseMasterTable.getSelectedRow(), 0).toString());
//
//            int patientID = Integer.parseInt(tblModel.getValueAt(jCaseMasterTable.getSelectedRow(), 0).toString());
//            tblModel.removeRow(jCaseMasterTable.getSelectedRow());
//
//            Helper.insertDeleteData("delete from case where case_id = " + caseId);
//
//        }

    }//GEN-LAST:event_jDeleteActionPerformed

    private void jUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateButtonActionPerformed
//        DefaultTableModel tblModel = (DefaultTableModel)jCaseMasterTable.getModel();
//
//        if (jCaseMasterTable.getSelectedRowCount() == 1){
//
//            Integer caseId = Integer.valueOf(tblModel.getValueAt(jCaseMasterTable.getSelectedRow(), 0).toString());
//            Integer precinctId = Integer.valueOf(jPrecinctId.getText());
//            Integer policeId = Integer.valueOf(jPoliceId.getText());
//            Integer lawyerId = Integer.valueOf(jLawyerId.getText());
//            Integer detectiveId = Integer.valueOf(jDetectiveId.getText());
//            String description = jDescription.getText();
//            String caseStatus = (String) jCaseStatus.getSelectedItem();
//
//            System.out.println(description);
//            System.out.println(caseId);
//
//            tblModel.setValueAt(precinctId, jCaseMasterTable.getSelectedRow(), 2);
//            tblModel.setValueAt(policeId, jCaseMasterTable.getSelectedRow(), 3);
//            tblModel.setValueAt(lawyerId, jCaseMasterTable.getSelectedRow(), 4);
//            tblModel.setValueAt(detectiveId, jCaseMasterTable.getSelectedRow(), 5);
//            tblModel.setValueAt(caseStatus, jCaseMasterTable.getSelectedRow(), 6);
//            tblModel.setValueAt(description, jCaseMasterTable.getSelectedRow(), 7);
//
//            Map<String, String> mp = new HashMap<>();
//            mp.put("description", description);
//            mp.put("lawyerid", String.valueOf(lawyerId));
//            mp.put("precinct_id", String.valueOf(precinctId));
//            mp.put("police_id", String.valueOf(policeId));
//            mp.put("casestatus", caseStatus);
//            mp.put("detective_id", String.valueOf(detectiveId));
//
//            try {
//                Helper.updateColumns("case", mp, "case_id = " + caseId);
//            }
//
//            catch (SQLException ex) {
//                System.out.println("Failed");
//                Logger.getLogger(CasePortal.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//            tblModel.setRowCount(0);
//
//            try {
//                List<Case> objList = Helper.getResultSet(Case.class, "case");
//
//                for(Case i : objList){
//                    Integer id = i.getCaseId();
//                    Integer objPrecinctId = i.getPrecinctId();
//                    Integer objPoliceId = i.getPoliceId();
//                    Integer objLawyerId = i.getLawyerId();
//                    Integer objDetectiveId = i.getDetectiveId();
//                    String objCaseStatus = i.getCaseStatus();
//                    String objDesc = i.getDescription();
//                    String objDate = i.getDateTime().toString();
//                    Object[] obj = {id, objDate, objPrecinctId, objPoliceId, objLawyerId, objDetectiveId, objCaseStatus, objDesc};
//                    tblModel.addRow(obj);
//                }
//
//            } catch (InstantiationException ex) {
//                Logger.getLogger(CasePortal.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }

    }//GEN-LAST:event_jUpdateButtonActionPerformed

    private void createEvidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createEvidenceActionPerformed

        Integer caseId = Integer.parseInt(jCaseId.getText());
        String desc = jDescription.getText();
        String imagePath = jImagePath.getName();

        Integer evidenceId = null;
        try {
            evidenceId = Helper.getMaxId("evidence", "evidence_id", null);
        } catch (SQLException ex) {
            Logger.getLogger(EvidencePortal.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel tblModel = (DefaultTableModel)jEvidenceTable.getModel();
        Object[] obj = {evidenceId, caseId, desc};
        tblModel.addRow(obj);

        Evidence evidence = new Evidence(evidenceId, caseId, desc, imagePath);
        evidence.addToEvidenceTable(evidence);

    }//GEN-LAST:event_createEvidenceActionPerformed

    private void jEvidenceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEvidenceTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)jEvidenceTable.getModel(); 
        if(jEvidenceTable.getSelectedRowCount() == 1){
            
            Integer evidenceId = Integer.parseInt(tblModel.getValueAt(jEvidenceTable.getSelectedRow(), 0).toString());
            jDescription.setText(tblModel.getValueAt(jEvidenceTable.getSelectedRow(), 2).toString());
            jCaseId.setText(tblModel.getValueAt(jEvidenceTable.getSelectedRow(), 1).toString());
            ResultSet result = Helper.getData("select * from evidence where evidence_id = " + evidenceId);
            ResultSetMapper<Evidence> evRSMapper = new ResultSetMapper<Evidence>();
            List<Evidence> evidenceList = evRSMapper.mapResultSetToObject(result, Evidence.class);
            if(evidenceList.size() == 1 && evidenceList.get(0).getImagePath() != null) {
                jImagePath.setName(evidenceList.get(0).getImagePath());
                ImageIcon imgIcon = new ImageIcon(evidenceList.get(0).getImagePath());
                Image img = imgIcon.getImage();
                Image scaledImage = img.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledImgIcon = new ImageIcon(scaledImage);
                imageLabel.setIcon(scaledImgIcon);
            }
            
        }
    }//GEN-LAST:event_jEvidenceTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EvidencePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EvidencePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EvidencePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EvidencePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvidencePortal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createEvidence;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton4;
    private javax.swing.JTextField jCaseId;
    private javax.swing.JButton jDelete;
    private javax.swing.JTextField jDescription;
    private javax.swing.JTable jEvidenceTable;
    private javax.swing.JLabel jImagePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jUpdateButton;
    private javax.swing.JButton uploadEvidence;
    // End of variables declaration//GEN-END:variables
}
