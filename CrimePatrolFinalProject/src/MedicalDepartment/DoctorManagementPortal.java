/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MedicalDepartment;

import PoliceDepartment.Case;
//import PoliceDepartment.Do;
import PoliceDepartment.Precinct;
import crimepatrolfinalproject.SysAdminJFrame1;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Doctor;
import model.Hospital;
import model.Location;
import utilPackage.Helper;
import utilPackage.SendNotification;
import utilPackage.ValidationHelper;

/**
 *
 * @author bashu
 */
public class DoctorManagementPortal extends javax.swing.JFrame {

    /**
     * Creates new form HospitalJFrame
     */
    public DoctorManagementPortal() throws SQLException {
        initComponents();
        ImageIcon ic = new ImageIcon("HOME.png");
        
        
        jLabel2.setIcon(ic);
        doctorId.disable();
        List<Doctor> objList = null;
        try {
            objList = Helper.fetchAllDoctors();
        } catch (ParseException ex) {
            Logger.getLogger(DoctorManagementPortal.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(Doctor i : objList){
            Integer iD = i.getDoctorId();
            String name = i.getName();
            Integer hospitalId = i.getHospitalId();
            String email = i.getEmail();
            Long phone = i.getPhoneNo();
            Integer locationId = i.getAddress();
            String bloodGroup = i.getBloodGroup();
            String gender = i.getGender();
            
            DefaultTableModel tblModel = (DefaultTableModel)doctorJTable.getModel();
            Object[] obj = {iD, name, hospitalId, email, phone, locationId, bloodGroup, gender};
            tblModel.addRow(obj);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jDocName = new javax.swing.JTextField();
        jHospitalId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorJTable = new javax.swing.JTable();
        hospCreateBtn = new javax.swing.JButton();
        hospUpdateBtn = new javax.swing.JButton();
        hospDeleteBtn = new javax.swing.JButton();
        hospResetBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPhone = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        doctorId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jAddress = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jBloodGroup = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jGender = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        homePageBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 255));
        jLabel1.setText("Doctor Name");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 139, 100, -1));
        getContentPane().add(jDocName, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 136, 151, -1));
        getContentPane().add(jHospitalId, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 177, 151, -1));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 255));
        jLabel4.setText("Hospital ID");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 180, 100, -1));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 204, 255));
        jLabel5.setText("Email");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 215, 100, -1));
        getContentPane().add(jEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 212, 151, -1));

        doctorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor ID", "Name", "Hospital ID", "Email", "Phone", "Address", "Blood Group", "Gender"
            }
        ));
        doctorJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(doctorJTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 95, 619, 314));

        hospCreateBtn.setText("CREATE");
        hospCreateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospCreateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(hospCreateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 427, -1, -1));

        hospUpdateBtn.setText("UPDATE");
        hospUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospUpdateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(hospUpdateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 427, -1, -1));

        hospDeleteBtn.setText("DELETE");
        hospDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospDeleteBtnActionPerformed(evt);
            }
        });
        getContentPane().add(hospDeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 427, -1, -1));

        hospResetBtn.setText("RESET");
        hospResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospResetBtnActionPerformed(evt);
            }
        });
        getContentPane().add(hospResetBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 427, -1, -1));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 204, 255));
        jLabel6.setText("Phone Number");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 250, -1, -1));
        getContentPane().add(jPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 247, 151, -1));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 204, 255));
        jLabel7.setText("Doctor Id");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 98, 100, -1));
        getContentPane().add(doctorId, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 95, 151, -1));

        jLabel3.setFont(new java.awt.Font("Helvetica", 1, 40)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Doctor Management Portal");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 40, -1, -1));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 204, 255));
        jLabel8.setText("Address");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 291, -1, -1));
        getContentPane().add(jAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 288, 151, -1));

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 204, 255));
        jLabel9.setText("Blood Group");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 329, -1, -1));
        getContentPane().add(jBloodGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 323, 151, -1));

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 204, 255));
        jLabel13.setText("Gender");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 367, -1, -1));

        jGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));
        getContentPane().add(jGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 364, 151, -1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon2/doctor.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 16, 87, 67));

        homePageBtn1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        homePageBtn1.setForeground(new java.awt.Color(0, 204, 255));
        homePageBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon2/backs.png"))); // NOI18N
        homePageBtn1.setText("BACK");
        homePageBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homePageBtn1ActionPerformed(evt);
            }
        });
        getContentPane().add(homePageBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, 130, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hospCreateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospCreateBtnActionPerformed
        // TODO add your handling code here:
        
        if(ValidationHelper.isEmptyOrNullString(jDocName.getText())) {
            JOptionPane.showMessageDialog(this, "Doctor Name cannot be Empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jHospitalId.getText())) {
            JOptionPane.showMessageDialog(this, "Hospital ID cannot be empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jEmail.getText())) {
            JOptionPane.showMessageDialog(this, "Email ID cannot be left empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jPhone.getText())) {
            JOptionPane.showMessageDialog(this, "Contact Number cannot be left empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jAddress.getText())) {
            JOptionPane.showMessageDialog(this, "Address ID cannot be left empty.");
            return;
        }
        
        Map<String, String> idsMap = Stream.of(new String[][] {
                                    { "Hospital ID",  jHospitalId.getText()},
                                    { "Address ID",  jAddress.getText()}
                                }).collect(Collectors.toMap(data -> data[0], data -> data[1]));
        
        String invalidId = ValidationHelper.getInvalidNumericId(idsMap);
        
        if (!invalidId.isBlank()) {
            JOptionPane.showMessageDialog(this, "Please Enter a Valid Numeric " + invalidId);
            return;
        }
        
        String docName = jDocName.getText();
        Integer hospitalId = Integer.parseInt(jHospitalId.getText());
        String email = jEmail.getText();
        Long phone = Long.parseLong(jPhone.getText());
        Integer address = Integer.parseInt(jAddress.getText());
        String bloodGroup = jBloodGroup.getText();
        String gender = jGender.getSelectedItem().toString();
        Integer doctorId = 0;
        try {
            doctorId = Helper.getMaxId("doctor", "doctor_id", null);
        } catch (SQLException ex) {
            //Logger.getLogger(CasePortal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        DefaultTableModel tblModel = (DefaultTableModel)doctorJTable.getModel();
        Object[] obj = {doctorId, docName, hospitalId, email, phone, address, bloodGroup, gender};
        tblModel.addRow(obj);
       
        Doctor doc = new Doctor(docName, address, email, phone, null, doctorId, bloodGroup, "Doctor", gender, doctorId, hospitalId);
        doc.addToDoctorTable(doc);
        JOptionPane.showMessageDialog(this, "Doctor Saved Successfully!!!");
    }//GEN-LAST:event_hospCreateBtnActionPerformed

    private void doctorJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorJTableMouseClicked
        // TODO add your handling code here:
              
        DefaultTableModel docTableModel = (DefaultTableModel) doctorJTable.getModel();
        
        if(doctorJTable.getSelectedRowCount() == 1) {
            
            String tblDoctorId = docTableModel.getValueAt( doctorJTable.getSelectedRow(),0).toString();
            String tblName = docTableModel.getValueAt( doctorJTable.getSelectedRow(),1).toString();
            String tblHospId = docTableModel.getValueAt( doctorJTable.getSelectedRow(),2).toString();
            String tblEmail = docTableModel.getValueAt( doctorJTable.getSelectedRow(),3).toString();
            String tblPhone = docTableModel.getValueAt( doctorJTable.getSelectedRow(),4).toString();
            String tblAddress = docTableModel.getValueAt( doctorJTable.getSelectedRow(),5).toString();
            String tblBloodGroup = docTableModel.getValueAt( doctorJTable.getSelectedRow(),6).toString();
            String tblGender = docTableModel.getValueAt( doctorJTable.getSelectedRow(),7).toString();


            doctorId.setText(tblDoctorId);
            jDocName.setText(tblName);
            jHospitalId.setText(tblHospId);
            jEmail.setText(tblEmail);
            jPhone.setText(tblPhone);
            jAddress.setText(tblAddress);
            jBloodGroup.setText(tblBloodGroup);
            jGender.setSelectedItem(tblGender);
        }
        
        
    }//GEN-LAST:event_doctorJTableMouseClicked

    private void hospUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospUpdateBtnActionPerformed
        // TODO add your handling code here:
        
        if(ValidationHelper.isEmptyOrNullString(jDocName.getText())) {
            JOptionPane.showMessageDialog(this, "Doctor Name Case cannot be Empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jHospitalId.getText())) {
            JOptionPane.showMessageDialog(this, "Hospital ID cannot be empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jEmail.getText())) {
            JOptionPane.showMessageDialog(this, "Email ID cannot be left empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jPhone.getText())) {
            JOptionPane.showMessageDialog(this, "Contact Number cannot be left empty.");
            return;
        }
        
        if(ValidationHelper.isEmptyOrNullString(jAddress.getText())) {
            JOptionPane.showMessageDialog(this, "Address ID cannot be left empty.");
            return;
        }
        
        Map<String, String> idsMap = Stream.of(new String[][] {
                                    { "Hospital ID",  jHospitalId.getText()},
                                    { "Address ID",  jAddress.getText()}
                                }).collect(Collectors.toMap(data -> data[0], data -> data[1]));
        
        String invalidId = ValidationHelper.getInvalidNumericId(idsMap);
        
        if (!invalidId.isBlank()) {
            JOptionPane.showMessageDialog(this, "Please Enter a Valid Numeric " + invalidId);
            return;
        }
        
        DefaultTableModel tblModel = (DefaultTableModel)doctorJTable.getModel();
        
        
        if (doctorJTable.getSelectedRowCount() == 1){
            
            Integer doctorId = Integer.valueOf(tblModel.getValueAt(doctorJTable.getSelectedRow(), 0).toString()); 
            String docName = jDocName.getText(); 
            Integer hospitalId = Integer.valueOf(jHospitalId.getText()); 
            Integer locationId = Integer.valueOf(jAddress.getText()); 
            String email = jEmail.getText();
            Integer phone = Integer.valueOf(jPhone.getText()); 
            String bloodGroup = jBloodGroup.getText();
            String gender = jGender.getSelectedItem().toString();
            
           
            tblModel.setValueAt(docName, doctorJTable.getSelectedRow(), 1);
            tblModel.setValueAt(hospitalId, doctorJTable.getSelectedRow(), 2);
            tblModel.setValueAt(email, doctorJTable.getSelectedRow(), 3);
            tblModel.setValueAt(phone, doctorJTable.getSelectedRow(), 4);
            tblModel.setValueAt(locationId, doctorJTable.getSelectedRow(), 5);
            tblModel.setValueAt(bloodGroup, doctorJTable.getSelectedRow(), 6);
            tblModel.setValueAt(gender, doctorJTable.getSelectedRow(), 7);
            
            Map<String, String> personUpdMap = new HashMap<>();
            personUpdMap.put("name", String.valueOf(docName));
            personUpdMap.put("location_id", String.valueOf(locationId));
            personUpdMap.put("email", String.valueOf(email));
            personUpdMap.put("phone_no", String.valueOf(phone));
            personUpdMap.put("blood_group", String.valueOf(bloodGroup));
            personUpdMap.put("gender", String.valueOf(gender));
            
            Map<String, String> doctorUpdMap = new HashMap<>();
            doctorUpdMap.put("hospital_id", String.valueOf(hospitalId));
            
            try {
                Helper.updateColumns("person", personUpdMap, "person_id = " + doctorId);
                Helper.updateColumns("doctor", doctorUpdMap, "doctor_id = " + doctorId);
            } 
            
            catch (SQLException ex) {
                System.out.println("Failed");
                Logger.getLogger(DoctorManagementPortal.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }
        
    }//GEN-LAST:event_hospUpdateBtnActionPerformed

    private void hospDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospDeleteBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)doctorJTable.getModel();
        if(doctorJTable.getSelectedRowCount() == 1){
            
            Integer doctorId = Integer.valueOf(tblModel.getValueAt(doctorJTable.getSelectedRow(), 0).toString()); 
            tblModel.removeRow(doctorJTable.getSelectedRow());
            
            Helper.insertDeleteData("delete from doctor where doctor_id = " + doctorId);
            Helper.insertDeleteData("delete from person where person_id = " + doctorId);
            
          }
       
        
    }//GEN-LAST:event_hospDeleteBtnActionPerformed

    public void resetAllFields() {
        doctorId.setText(null);
        jDocName.setText(null);
        jHospitalId.setText(null);
        jEmail.setText(null);
        jPhone.setText(null);
        jAddress.setText(null);
        jBloodGroup.setText(null);
        jGender.setSelectedItem(null);
    }
    
    private void hospResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospResetBtnActionPerformed
        // TODO add your handling code here:
        resetAllFields();
    }//GEN-LAST:event_hospResetBtnActionPerformed

    private void homePageBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homePageBtn1ActionPerformed

        SysAdminJFrame1 obj = new SysAdminJFrame1();
        obj.setVisible(true);
        obj.setExtendedState(JFrame.MAXIMIZED_BOTH );
        dispose();

    }//GEN-LAST:event_homePageBtn1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorManagementPortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorManagementPortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorManagementPortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorManagementPortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new DoctorManagementPortal().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(DoctorManagementPortal.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField doctorId;
    private javax.swing.JTable doctorJTable;
    private javax.swing.JButton homePageBtn1;
    private javax.swing.JButton hospCreateBtn;
    private javax.swing.JButton hospDeleteBtn;
    private javax.swing.JButton hospResetBtn;
    private javax.swing.JButton hospUpdateBtn;
    private javax.swing.JTextField jAddress;
    private javax.swing.JTextField jBloodGroup;
    private javax.swing.JTextField jDocName;
    private javax.swing.JTextField jEmail;
    private javax.swing.JComboBox<String> jGender;
    private javax.swing.JTextField jHospitalId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jPhone;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
